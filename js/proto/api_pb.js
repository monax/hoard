// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var grant_pb = require('./grant_pb.js');
goog.object.extend(proto, grant_pb);
var reference_pb = require('./reference_pb.js');
goog.object.extend(proto, reference_pb);
var stores_pb = require('./stores_pb.js');
goog.object.extend(proto, stores_pb);
goog.exportSymbol('proto.api.Address', null, global);
goog.exportSymbol('proto.api.Ciphertext', null, global);
goog.exportSymbol('proto.api.GrantAndGrantSpec', null, global);
goog.exportSymbol('proto.api.Header', null, global);
goog.exportSymbol('proto.api.Plaintext', null, global);
goog.exportSymbol('proto.api.PlaintextAndGrantSpec', null, global);
goog.exportSymbol('proto.api.ReferenceAndCiphertext', null, global);
goog.exportSymbol('proto.api.ReferenceAndGrantSpec', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.GrantAndGrantSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.GrantAndGrantSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.GrantAndGrantSpec.displayName = 'proto.api.GrantAndGrantSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PlaintextAndGrantSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.PlaintextAndGrantSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.PlaintextAndGrantSpec.displayName = 'proto.api.PlaintextAndGrantSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ReferenceAndGrantSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ReferenceAndGrantSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ReferenceAndGrantSpec.displayName = 'proto.api.ReferenceAndGrantSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Header.displayName = 'proto.api.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Plaintext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Plaintext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Plaintext.displayName = 'proto.api.Plaintext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Ciphertext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Ciphertext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Ciphertext.displayName = 'proto.api.Ciphertext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ReferenceAndCiphertext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ReferenceAndCiphertext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ReferenceAndCiphertext.displayName = 'proto.api.ReferenceAndCiphertext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Address.displayName = 'proto.api.Address';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.GrantAndGrantSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.api.GrantAndGrantSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.GrantAndGrantSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.GrantAndGrantSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    grant: (f = msg.getGrant()) && grant_pb.Grant.toObject(includeInstance, f),
    grantspec: (f = msg.getGrantspec()) && grant_pb.Spec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.GrantAndGrantSpec}
 */
proto.api.GrantAndGrantSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.GrantAndGrantSpec;
  return proto.api.GrantAndGrantSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.GrantAndGrantSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.GrantAndGrantSpec}
 */
proto.api.GrantAndGrantSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new grant_pb.Grant;
      reader.readMessage(value,grant_pb.Grant.deserializeBinaryFromReader);
      msg.setGrant(value);
      break;
    case 2:
      var value = new grant_pb.Spec;
      reader.readMessage(value,grant_pb.Spec.deserializeBinaryFromReader);
      msg.setGrantspec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.GrantAndGrantSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.GrantAndGrantSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.GrantAndGrantSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.GrantAndGrantSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrant();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      grant_pb.Grant.serializeBinaryToWriter
    );
  }
  f = message.getGrantspec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      grant_pb.Spec.serializeBinaryToWriter
    );
  }
};


/**
 * optional grant.Grant Grant = 1;
 * @return {?proto.grant.Grant}
 */
proto.api.GrantAndGrantSpec.prototype.getGrant = function() {
  return /** @type{?proto.grant.Grant} */ (
    jspb.Message.getWrapperField(this, grant_pb.Grant, 1));
};


/**
 * @param {?proto.grant.Grant|undefined} value
 * @return {!proto.api.GrantAndGrantSpec} returns this
*/
proto.api.GrantAndGrantSpec.prototype.setGrant = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.GrantAndGrantSpec} returns this
 */
proto.api.GrantAndGrantSpec.prototype.clearGrant = function() {
  return this.setGrant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.GrantAndGrantSpec.prototype.hasGrant = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional grant.Spec GrantSpec = 2;
 * @return {?proto.grant.Spec}
 */
proto.api.GrantAndGrantSpec.prototype.getGrantspec = function() {
  return /** @type{?proto.grant.Spec} */ (
    jspb.Message.getWrapperField(this, grant_pb.Spec, 2));
};


/**
 * @param {?proto.grant.Spec|undefined} value
 * @return {!proto.api.GrantAndGrantSpec} returns this
*/
proto.api.GrantAndGrantSpec.prototype.setGrantspec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.GrantAndGrantSpec} returns this
 */
proto.api.GrantAndGrantSpec.prototype.clearGrantspec = function() {
  return this.setGrantspec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.GrantAndGrantSpec.prototype.hasGrantspec = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PlaintextAndGrantSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PlaintextAndGrantSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PlaintextAndGrantSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PlaintextAndGrantSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    plaintext: (f = msg.getPlaintext()) && proto.api.Plaintext.toObject(includeInstance, f),
    grantspec: (f = msg.getGrantspec()) && grant_pb.Spec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PlaintextAndGrantSpec}
 */
proto.api.PlaintextAndGrantSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PlaintextAndGrantSpec;
  return proto.api.PlaintextAndGrantSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PlaintextAndGrantSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PlaintextAndGrantSpec}
 */
proto.api.PlaintextAndGrantSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Plaintext;
      reader.readMessage(value,proto.api.Plaintext.deserializeBinaryFromReader);
      msg.setPlaintext(value);
      break;
    case 2:
      var value = new grant_pb.Spec;
      reader.readMessage(value,grant_pb.Spec.deserializeBinaryFromReader);
      msg.setGrantspec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PlaintextAndGrantSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.PlaintextAndGrantSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.PlaintextAndGrantSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PlaintextAndGrantSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlaintext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Plaintext.serializeBinaryToWriter
    );
  }
  f = message.getGrantspec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      grant_pb.Spec.serializeBinaryToWriter
    );
  }
};


/**
 * optional Plaintext Plaintext = 1;
 * @return {?proto.api.Plaintext}
 */
proto.api.PlaintextAndGrantSpec.prototype.getPlaintext = function() {
  return /** @type{?proto.api.Plaintext} */ (
    jspb.Message.getWrapperField(this, proto.api.Plaintext, 1));
};


/**
 * @param {?proto.api.Plaintext|undefined} value
 * @return {!proto.api.PlaintextAndGrantSpec} returns this
*/
proto.api.PlaintextAndGrantSpec.prototype.setPlaintext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.PlaintextAndGrantSpec} returns this
 */
proto.api.PlaintextAndGrantSpec.prototype.clearPlaintext = function() {
  return this.setPlaintext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PlaintextAndGrantSpec.prototype.hasPlaintext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional grant.Spec GrantSpec = 2;
 * @return {?proto.grant.Spec}
 */
proto.api.PlaintextAndGrantSpec.prototype.getGrantspec = function() {
  return /** @type{?proto.grant.Spec} */ (
    jspb.Message.getWrapperField(this, grant_pb.Spec, 2));
};


/**
 * @param {?proto.grant.Spec|undefined} value
 * @return {!proto.api.PlaintextAndGrantSpec} returns this
*/
proto.api.PlaintextAndGrantSpec.prototype.setGrantspec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.PlaintextAndGrantSpec} returns this
 */
proto.api.PlaintextAndGrantSpec.prototype.clearGrantspec = function() {
  return this.setGrantspec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PlaintextAndGrantSpec.prototype.hasGrantspec = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ReferenceAndGrantSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ReferenceAndGrantSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ReferenceAndGrantSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ReferenceAndGrantSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: (f = msg.getReference()) && reference_pb.Ref.toObject(includeInstance, f),
    grantspec: (f = msg.getGrantspec()) && grant_pb.Spec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ReferenceAndGrantSpec}
 */
proto.api.ReferenceAndGrantSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ReferenceAndGrantSpec;
  return proto.api.ReferenceAndGrantSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ReferenceAndGrantSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ReferenceAndGrantSpec}
 */
proto.api.ReferenceAndGrantSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new reference_pb.Ref;
      reader.readMessage(value,reference_pb.Ref.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 2:
      var value = new grant_pb.Spec;
      reader.readMessage(value,grant_pb.Spec.deserializeBinaryFromReader);
      msg.setGrantspec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ReferenceAndGrantSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ReferenceAndGrantSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ReferenceAndGrantSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ReferenceAndGrantSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      reference_pb.Ref.serializeBinaryToWriter
    );
  }
  f = message.getGrantspec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      grant_pb.Spec.serializeBinaryToWriter
    );
  }
};


/**
 * optional reference.Ref Reference = 1;
 * @return {?proto.reference.Ref}
 */
proto.api.ReferenceAndGrantSpec.prototype.getReference = function() {
  return /** @type{?proto.reference.Ref} */ (
    jspb.Message.getWrapperField(this, reference_pb.Ref, 1));
};


/**
 * @param {?proto.reference.Ref|undefined} value
 * @return {!proto.api.ReferenceAndGrantSpec} returns this
*/
proto.api.ReferenceAndGrantSpec.prototype.setReference = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ReferenceAndGrantSpec} returns this
 */
proto.api.ReferenceAndGrantSpec.prototype.clearReference = function() {
  return this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ReferenceAndGrantSpec.prototype.hasReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional grant.Spec GrantSpec = 2;
 * @return {?proto.grant.Spec}
 */
proto.api.ReferenceAndGrantSpec.prototype.getGrantspec = function() {
  return /** @type{?proto.grant.Spec} */ (
    jspb.Message.getWrapperField(this, grant_pb.Spec, 2));
};


/**
 * @param {?proto.grant.Spec|undefined} value
 * @return {!proto.api.ReferenceAndGrantSpec} returns this
*/
proto.api.ReferenceAndGrantSpec.prototype.setGrantspec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ReferenceAndGrantSpec} returns this
 */
proto.api.ReferenceAndGrantSpec.prototype.clearGrantspec = function() {
  return this.setGrantspec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ReferenceAndGrantSpec.prototype.hasGrantspec = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    salt: msg.getSalt_asB64(),
    data: msg.getData_asB64(),
    chunksize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Header}
 */
proto.api.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Header;
  return proto.api.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Header}
 */
proto.api.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChunksize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getChunksize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional bytes Salt = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Header.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Salt = 1;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.api.Header.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes Salt = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.api.Header.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Header} returns this
 */
proto.api.Header.prototype.setSalt = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes Data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.Header.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.api.Header.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.api.Header.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Header} returns this
 */
proto.api.Header.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 ChunkSize = 3;
 * @return {number}
 */
proto.api.Header.prototype.getChunksize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Header} returns this
 */
proto.api.Header.prototype.setChunksize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Plaintext.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Plaintext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Plaintext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Plaintext.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: msg.getBody_asB64(),
    head: (f = msg.getHead()) && proto.api.Header.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Plaintext}
 */
proto.api.Plaintext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Plaintext;
  return proto.api.Plaintext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Plaintext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Plaintext}
 */
proto.api.Plaintext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    case 3:
      var value = new proto.api.Header;
      reader.readMessage(value,proto.api.Header.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Plaintext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Plaintext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Plaintext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Plaintext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Header.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes Body = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Plaintext.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.api.Plaintext.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes Body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.api.Plaintext.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Plaintext} returns this
 */
proto.api.Plaintext.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Header Head = 3;
 * @return {?proto.api.Header}
 */
proto.api.Plaintext.prototype.getHead = function() {
  return /** @type{?proto.api.Header} */ (
    jspb.Message.getWrapperField(this, proto.api.Header, 3));
};


/**
 * @param {?proto.api.Header|undefined} value
 * @return {!proto.api.Plaintext} returns this
*/
proto.api.Plaintext.prototype.setHead = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Plaintext} returns this
 */
proto.api.Plaintext.prototype.clearHead = function() {
  return this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Plaintext.prototype.hasHead = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Ciphertext.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Ciphertext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Ciphertext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Ciphertext.toObject = function(includeInstance, msg) {
  var f, obj = {
    encrypteddata: msg.getEncrypteddata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Ciphertext}
 */
proto.api.Ciphertext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Ciphertext;
  return proto.api.Ciphertext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Ciphertext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Ciphertext}
 */
proto.api.Ciphertext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncrypteddata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Ciphertext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Ciphertext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Ciphertext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Ciphertext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncrypteddata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes EncryptedData = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Ciphertext.prototype.getEncrypteddata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes EncryptedData = 1;
 * This is a type-conversion wrapper around `getEncrypteddata()`
 * @return {string}
 */
proto.api.Ciphertext.prototype.getEncrypteddata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncrypteddata()));
};


/**
 * optional bytes EncryptedData = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncrypteddata()`
 * @return {!Uint8Array}
 */
proto.api.Ciphertext.prototype.getEncrypteddata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncrypteddata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Ciphertext} returns this
 */
proto.api.Ciphertext.prototype.setEncrypteddata = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ReferenceAndCiphertext.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ReferenceAndCiphertext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ReferenceAndCiphertext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ReferenceAndCiphertext.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: (f = msg.getReference()) && reference_pb.Ref.toObject(includeInstance, f),
    ciphertext: (f = msg.getCiphertext()) && proto.api.Ciphertext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ReferenceAndCiphertext}
 */
proto.api.ReferenceAndCiphertext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ReferenceAndCiphertext;
  return proto.api.ReferenceAndCiphertext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ReferenceAndCiphertext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ReferenceAndCiphertext}
 */
proto.api.ReferenceAndCiphertext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new reference_pb.Ref;
      reader.readMessage(value,reference_pb.Ref.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 2:
      var value = new proto.api.Ciphertext;
      reader.readMessage(value,proto.api.Ciphertext.deserializeBinaryFromReader);
      msg.setCiphertext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ReferenceAndCiphertext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ReferenceAndCiphertext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ReferenceAndCiphertext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ReferenceAndCiphertext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      reference_pb.Ref.serializeBinaryToWriter
    );
  }
  f = message.getCiphertext();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Ciphertext.serializeBinaryToWriter
    );
  }
};


/**
 * optional reference.Ref Reference = 1;
 * @return {?proto.reference.Ref}
 */
proto.api.ReferenceAndCiphertext.prototype.getReference = function() {
  return /** @type{?proto.reference.Ref} */ (
    jspb.Message.getWrapperField(this, reference_pb.Ref, 1));
};


/**
 * @param {?proto.reference.Ref|undefined} value
 * @return {!proto.api.ReferenceAndCiphertext} returns this
*/
proto.api.ReferenceAndCiphertext.prototype.setReference = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ReferenceAndCiphertext} returns this
 */
proto.api.ReferenceAndCiphertext.prototype.clearReference = function() {
  return this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ReferenceAndCiphertext.prototype.hasReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Ciphertext Ciphertext = 2;
 * @return {?proto.api.Ciphertext}
 */
proto.api.ReferenceAndCiphertext.prototype.getCiphertext = function() {
  return /** @type{?proto.api.Ciphertext} */ (
    jspb.Message.getWrapperField(this, proto.api.Ciphertext, 2));
};


/**
 * @param {?proto.api.Ciphertext|undefined} value
 * @return {!proto.api.ReferenceAndCiphertext} returns this
*/
proto.api.ReferenceAndCiphertext.prototype.setCiphertext = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ReferenceAndCiphertext} returns this
 */
proto.api.ReferenceAndCiphertext.prototype.clearCiphertext = function() {
  return this.setCiphertext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ReferenceAndCiphertext.prototype.hasCiphertext = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Address}
 */
proto.api.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Address;
  return proto.api.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Address}
 */
proto.api.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Address.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.api.Address.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.api.Address.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Address} returns this
 */
proto.api.Address.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.api);
