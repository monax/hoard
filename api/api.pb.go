// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grant "github.com/monax/hoard/v8/grant"
	reference "github.com/monax/hoard/v8/reference"
	stores "github.com/monax/hoard/v8/stores"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GrantAndGrantSpec struct {
	Grant *grant.Grant `protobuf:"bytes,1,opt,name=Grant,proto3" json:"Grant,omitempty"`
	// The type of grant to output
	GrantSpec            *grant.Spec `protobuf:"bytes,2,opt,name=GrantSpec,proto3" json:"GrantSpec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GrantAndGrantSpec) Reset()         { *m = GrantAndGrantSpec{} }
func (m *GrantAndGrantSpec) String() string { return proto.CompactTextString(m) }
func (*GrantAndGrantSpec) ProtoMessage()    {}
func (*GrantAndGrantSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *GrantAndGrantSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrantAndGrantSpec.Unmarshal(m, b)
}
func (m *GrantAndGrantSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrantAndGrantSpec.Marshal(b, m, deterministic)
}
func (m *GrantAndGrantSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrantAndGrantSpec.Merge(m, src)
}
func (m *GrantAndGrantSpec) XXX_Size() int {
	return xxx_messageInfo_GrantAndGrantSpec.Size(m)
}
func (m *GrantAndGrantSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GrantAndGrantSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GrantAndGrantSpec proto.InternalMessageInfo

func (m *GrantAndGrantSpec) GetGrant() *grant.Grant {
	if m != nil {
		return m.Grant
	}
	return nil
}

func (m *GrantAndGrantSpec) GetGrantSpec() *grant.Spec {
	if m != nil {
		return m.GrantSpec
	}
	return nil
}

type PlaintextAndGrantSpec struct {
	Plaintext *Plaintext `protobuf:"bytes,1,opt,name=Plaintext,proto3" json:"Plaintext,omitempty"`
	// The type of grant to output
	GrantSpec            *grant.Spec `protobuf:"bytes,2,opt,name=GrantSpec,proto3" json:"GrantSpec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PlaintextAndGrantSpec) Reset()         { *m = PlaintextAndGrantSpec{} }
func (m *PlaintextAndGrantSpec) String() string { return proto.CompactTextString(m) }
func (*PlaintextAndGrantSpec) ProtoMessage()    {}
func (*PlaintextAndGrantSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *PlaintextAndGrantSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaintextAndGrantSpec.Unmarshal(m, b)
}
func (m *PlaintextAndGrantSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaintextAndGrantSpec.Marshal(b, m, deterministic)
}
func (m *PlaintextAndGrantSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaintextAndGrantSpec.Merge(m, src)
}
func (m *PlaintextAndGrantSpec) XXX_Size() int {
	return xxx_messageInfo_PlaintextAndGrantSpec.Size(m)
}
func (m *PlaintextAndGrantSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaintextAndGrantSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PlaintextAndGrantSpec proto.InternalMessageInfo

func (m *PlaintextAndGrantSpec) GetPlaintext() *Plaintext {
	if m != nil {
		return m.Plaintext
	}
	return nil
}

func (m *PlaintextAndGrantSpec) GetGrantSpec() *grant.Spec {
	if m != nil {
		return m.GrantSpec
	}
	return nil
}

type ReferenceAndGrantSpec struct {
	Reference *reference.Ref `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	// The type of grant to output
	GrantSpec            *grant.Spec `protobuf:"bytes,2,opt,name=GrantSpec,proto3" json:"GrantSpec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReferenceAndGrantSpec) Reset()         { *m = ReferenceAndGrantSpec{} }
func (m *ReferenceAndGrantSpec) String() string { return proto.CompactTextString(m) }
func (*ReferenceAndGrantSpec) ProtoMessage()    {}
func (*ReferenceAndGrantSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *ReferenceAndGrantSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReferenceAndGrantSpec.Unmarshal(m, b)
}
func (m *ReferenceAndGrantSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReferenceAndGrantSpec.Marshal(b, m, deterministic)
}
func (m *ReferenceAndGrantSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferenceAndGrantSpec.Merge(m, src)
}
func (m *ReferenceAndGrantSpec) XXX_Size() int {
	return xxx_messageInfo_ReferenceAndGrantSpec.Size(m)
}
func (m *ReferenceAndGrantSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferenceAndGrantSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ReferenceAndGrantSpec proto.InternalMessageInfo

func (m *ReferenceAndGrantSpec) GetReference() *reference.Ref {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *ReferenceAndGrantSpec) GetGrantSpec() *grant.Spec {
	if m != nil {
		return m.GrantSpec
	}
	return nil
}

type Header struct {
	Salt []byte `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	// Metadata
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	// The chunk size in bytes to use for the data
	ChunkSize            int64    `protobuf:"varint,3,opt,name=ChunkSize,proto3" json:"ChunkSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *Header) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Header) GetChunkSize() int64 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

type Plaintext struct {
	Body                 []byte   `protobuf:"bytes,1,opt,name=Body,proto3" json:"Body,omitempty"`
	Head                 *Header  `protobuf:"bytes,3,opt,name=Head,proto3" json:"Head,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Plaintext) Reset()         { *m = Plaintext{} }
func (m *Plaintext) String() string { return proto.CompactTextString(m) }
func (*Plaintext) ProtoMessage()    {}
func (*Plaintext) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *Plaintext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plaintext.Unmarshal(m, b)
}
func (m *Plaintext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plaintext.Marshal(b, m, deterministic)
}
func (m *Plaintext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plaintext.Merge(m, src)
}
func (m *Plaintext) XXX_Size() int {
	return xxx_messageInfo_Plaintext.Size(m)
}
func (m *Plaintext) XXX_DiscardUnknown() {
	xxx_messageInfo_Plaintext.DiscardUnknown(m)
}

var xxx_messageInfo_Plaintext proto.InternalMessageInfo

func (m *Plaintext) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Plaintext) GetHead() *Header {
	if m != nil {
		return m.Head
	}
	return nil
}

type Ciphertext struct {
	EncryptedData        []byte   `protobuf:"bytes,1,opt,name=EncryptedData,proto3" json:"EncryptedData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ciphertext) Reset()         { *m = Ciphertext{} }
func (m *Ciphertext) String() string { return proto.CompactTextString(m) }
func (*Ciphertext) ProtoMessage()    {}
func (*Ciphertext) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *Ciphertext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ciphertext.Unmarshal(m, b)
}
func (m *Ciphertext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ciphertext.Marshal(b, m, deterministic)
}
func (m *Ciphertext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ciphertext.Merge(m, src)
}
func (m *Ciphertext) XXX_Size() int {
	return xxx_messageInfo_Ciphertext.Size(m)
}
func (m *Ciphertext) XXX_DiscardUnknown() {
	xxx_messageInfo_Ciphertext.DiscardUnknown(m)
}

var xxx_messageInfo_Ciphertext proto.InternalMessageInfo

func (m *Ciphertext) GetEncryptedData() []byte {
	if m != nil {
		return m.EncryptedData
	}
	return nil
}

type ReferenceAndCiphertext struct {
	Reference            *reference.Ref `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Ciphertext           *Ciphertext    `protobuf:"bytes,2,opt,name=Ciphertext,proto3" json:"Ciphertext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReferenceAndCiphertext) Reset()         { *m = ReferenceAndCiphertext{} }
func (m *ReferenceAndCiphertext) String() string { return proto.CompactTextString(m) }
func (*ReferenceAndCiphertext) ProtoMessage()    {}
func (*ReferenceAndCiphertext) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *ReferenceAndCiphertext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReferenceAndCiphertext.Unmarshal(m, b)
}
func (m *ReferenceAndCiphertext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReferenceAndCiphertext.Marshal(b, m, deterministic)
}
func (m *ReferenceAndCiphertext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferenceAndCiphertext.Merge(m, src)
}
func (m *ReferenceAndCiphertext) XXX_Size() int {
	return xxx_messageInfo_ReferenceAndCiphertext.Size(m)
}
func (m *ReferenceAndCiphertext) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferenceAndCiphertext.DiscardUnknown(m)
}

var xxx_messageInfo_ReferenceAndCiphertext proto.InternalMessageInfo

func (m *ReferenceAndCiphertext) GetReference() *reference.Ref {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *ReferenceAndCiphertext) GetCiphertext() *Ciphertext {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

type Address struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func init() {
	proto.RegisterType((*GrantAndGrantSpec)(nil), "api.GrantAndGrantSpec")
	proto.RegisterType((*PlaintextAndGrantSpec)(nil), "api.PlaintextAndGrantSpec")
	proto.RegisterType((*ReferenceAndGrantSpec)(nil), "api.ReferenceAndGrantSpec")
	proto.RegisterType((*Header)(nil), "api.Header")
	proto.RegisterType((*Plaintext)(nil), "api.Plaintext")
	proto.RegisterType((*Ciphertext)(nil), "api.Ciphertext")
	proto.RegisterType((*ReferenceAndCiphertext)(nil), "api.ReferenceAndCiphertext")
	proto.RegisterType((*Address)(nil), "api.Address")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x1b, 0x93, 0xc8, 0x53, 0x43, 0x61, 0x25, 0xaa, 0xc8, 0x80, 0x5a, 0x99, 0x0a, 0x05,
	0x51, 0x39, 0x91, 0x11, 0x12, 0xea, 0x89, 0x36, 0x41, 0x85, 0x0b, 0x8a, 0xd6, 0xe2, 0xc2, 0x6d,
	0x13, 0x4f, 0x12, 0x0b, 0xd7, 0xb6, 0xd6, 0x6b, 0x68, 0x39, 0xf3, 0x5f, 0x38, 0xf1, 0x1f, 0xd1,
	0xae, 0x37, 0xfe, 0x4a, 0x85, 0x94, 0x93, 0x77, 0x67, 0xde, 0xbc, 0x37, 0xfb, 0x76, 0xd6, 0x60,
	0xb1, 0x2c, 0xf2, 0x32, 0x9e, 0x8a, 0x94, 0xf4, 0x58, 0x16, 0x39, 0x87, 0x6b, 0xce, 0x12, 0x51,
	0x46, 0x9c, 0x23, 0x8e, 0x2b, 0xe4, 0x98, 0x2c, 0x51, 0x07, 0xec, 0x5c, 0xa4, 0x1c, 0xf3, 0x72,
	0xe7, 0x2e, 0xe0, 0xc9, 0xb5, 0x44, 0x5f, 0x26, 0xa1, 0xfa, 0x06, 0x19, 0x2e, 0x89, 0x0b, 0x0f,
	0xd4, 0x66, 0x68, 0x9c, 0x1a, 0xa3, 0x43, 0xdf, 0xf6, 0x4a, 0x42, 0x15, 0xa3, 0x65, 0x8a, 0xbc,
	0x06, 0xab, 0x2a, 0x18, 0x1e, 0x28, 0xdc, 0xa1, 0xc6, 0xc9, 0x10, 0xad, 0xb3, 0x6e, 0x06, 0x4f,
	0xe7, 0x31, 0x8b, 0x12, 0x81, 0xb7, 0x6d, 0x9d, 0x73, 0xb0, 0xaa, 0x84, 0xd6, 0x7a, 0xe4, 0xc9,
	0xc3, 0x54, 0x51, 0x5a, 0x03, 0xf6, 0x54, 0xa4, 0xdb, 0x63, 0x77, 0x15, 0xab, 0x44, 0xa5, 0x58,
	0x3b, 0x44, 0x71, 0x45, 0x6b, 0xc0, 0x3e, 0x8a, 0x5f, 0xa0, 0xff, 0x09, 0x59, 0x88, 0x9c, 0x10,
	0x30, 0x03, 0x16, 0x97, 0xe7, 0xb1, 0xa9, 0x5a, 0xcb, 0xd8, 0x8c, 0x09, 0xa6, 0x38, 0x6c, 0xaa,
	0xd6, 0xe4, 0x39, 0x58, 0xd3, 0x4d, 0x91, 0x7c, 0x0f, 0xa2, 0x5f, 0x38, 0xec, 0x9d, 0x1a, 0xa3,
	0x1e, 0xad, 0x03, 0xee, 0x87, 0x86, 0x35, 0xb2, 0xfc, 0x2a, 0x0d, 0xef, 0xb6, 0x94, 0x72, 0x4d,
	0x4e, 0xc0, 0x94, 0x82, 0xaa, 0x52, 0xb6, 0x25, 0x6d, 0x2b, 0x3b, 0xa0, 0x2a, 0xe1, 0xfa, 0x00,
	0xd3, 0x28, 0xdb, 0x20, 0x57, 0x14, 0x67, 0xf0, 0xf0, 0x63, 0xb2, 0xe4, 0x77, 0x99, 0xc0, 0x50,
	0xb5, 0x52, 0x72, 0xb5, 0x83, 0xee, 0x4f, 0x38, 0x6e, 0xfa, 0xd6, 0xa8, 0xdf, 0xcf, 0xb8, 0x71,
	0x53, 0x5b, 0x3b, 0x77, 0xa4, 0x5a, 0xac, 0xc3, 0xb4, 0x01, 0x71, 0x5f, 0xc2, 0xe0, 0x32, 0x0c,
	0x39, 0xe6, 0x39, 0x19, 0x56, 0x4b, 0xdd, 0xe3, 0x76, 0xeb, 0xff, 0x39, 0xd0, 0x73, 0x49, 0xde,
	0xc1, 0x60, 0x5e, 0x88, 0x00, 0x59, 0x4c, 0x9c, 0xf6, 0xc0, 0x34, 0x6f, 0xdb, 0x69, 0x0d, 0xee,
	0xc8, 0x20, 0x6f, 0xc0, 0xfa, 0x9a, 0xe4, 0xc8, 0xe2, 0x6b, 0x14, 0xa4, 0x95, 0x74, 0x3a, 0x73,
	0x37, 0x31, 0x88, 0x0f, 0x66, 0x43, 0xe0, 0xde, 0x71, 0xda, 0x11, 0x18, 0x41, 0xbf, 0x14, 0xd8,
	0x61, 0x6f, 0x59, 0x35, 0x31, 0x88, 0x07, 0x7d, 0x8a, 0x0a, 0x79, 0xac, 0xf8, 0x77, 0x1e, 0x61,
	0x9b, 0x9b, 0x9c, 0x83, 0x5d, 0x32, 0xcf, 0x30, 0x46, 0x81, 0x1d, 0x7e, 0x5b, 0x71, 0x68, 0x9f,
	0x26, 0x86, 0xcf, 0xc0, 0x9a, 0xc6, 0xc8, 0xb8, 0x7e, 0x37, 0xbd, 0x79, 0x21, 0x48, 0xe7, 0x84,
	0xdd, 0x9e, 0x46, 0xc6, 0xc4, 0x90, 0x50, 0x69, 0x4d, 0x27, 0xd5, 0x35, 0x47, 0x42, 0xfd, 0xdf,
	0x06, 0x80, 0x1e, 0x9e, 0x28, 0x4d, 0xc8, 0x05, 0x0c, 0xf4, 0x6e, 0x47, 0xe8, 0xd9, 0x8e, 0x81,
	0xf5, 0xc5, 0x2b, 0xd5, 0x0b, 0x18, 0xcc, 0xb0, 0xac, 0xfd, 0x1f, 0xf6, 0xde, 0x36, 0xfe, 0x1a,
	0x30, 0x08, 0x44, 0xca, 0xd9, 0x5a, 0x3e, 0x57, 0x73, 0x5e, 0xe4, 0x1b, 0xd2, 0x9d, 0xb4, 0xb6,
	0x3d, 0xfa, 0xa0, 0xe6, 0xbc, 0x88, 0xe5, 0x35, 0x35, 0x32, 0x4e, 0xb7, 0x50, 0x41, 0x5f, 0x81,
	0x19, 0x08, 0x26, 0x3a, 0xd0, 0xc7, 0x9e, 0xfe, 0x8d, 0xca, 0xdc, 0xe7, 0x64, 0x95, 0x92, 0x33,
	0xe8, 0x57, 0x77, 0xd3, 0x44, 0xb6, 0x76, 0x57, 0x27, 0xdf, 0x5e, 0xac, 0x23, 0xb1, 0x29, 0x16,
	0xde, 0x32, 0xbd, 0x19, 0xdf, 0xa4, 0x09, 0xbb, 0x1d, 0x6f, 0x52, 0xc6, 0xc3, 0xf1, 0x8f, 0xf7,
	0x63, 0x96, 0x45, 0x8b, 0xbe, 0xfa, 0x2f, 0xbf, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x2f,
	0xf3, 0x4c, 0xd5, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrantClient is the client API for Grant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrantClient interface {
	// Put a Plaintext and returned the sealed Reference as a Grant
	PutSeal(ctx context.Context, opts ...grpc.CallOption) (Grant_PutSealClient, error)
	// Unseal a Grant and follow the Reference to return a Plaintext
	UnsealGet(ctx context.Context, in *grant.Grant, opts ...grpc.CallOption) (Grant_UnsealGetClient, error)
	// Seal a Reference to create a Grant
	Seal(ctx context.Context, opts ...grpc.CallOption) (Grant_SealClient, error)
	// Unseal a Grant to recover the Reference
	Unseal(ctx context.Context, in *grant.Grant, opts ...grpc.CallOption) (Grant_UnsealClient, error)
	// Convert one grant to another grant to re-share with another party or just
	// to change grant type
	Reseal(ctx context.Context, in *GrantAndGrantSpec, opts ...grpc.CallOption) (*grant.Grant, error)
	// Unseal a Grant and follow the Reference to delete the Plaintext
	UnsealDelete(ctx context.Context, in *grant.Grant, opts ...grpc.CallOption) (Grant_UnsealDeleteClient, error)
}

type grantClient struct {
	cc *grpc.ClientConn
}

func NewGrantClient(cc *grpc.ClientConn) GrantClient {
	return &grantClient{cc}
}

func (c *grantClient) PutSeal(ctx context.Context, opts ...grpc.CallOption) (Grant_PutSealClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grant_serviceDesc.Streams[0], "/api.Grant/PutSeal", opts...)
	if err != nil {
		return nil, err
	}
	x := &grantPutSealClient{stream}
	return x, nil
}

type Grant_PutSealClient interface {
	Send(*PlaintextAndGrantSpec) error
	CloseAndRecv() (*grant.Grant, error)
	grpc.ClientStream
}

type grantPutSealClient struct {
	grpc.ClientStream
}

func (x *grantPutSealClient) Send(m *PlaintextAndGrantSpec) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grantPutSealClient) CloseAndRecv() (*grant.Grant, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(grant.Grant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grantClient) UnsealGet(ctx context.Context, in *grant.Grant, opts ...grpc.CallOption) (Grant_UnsealGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grant_serviceDesc.Streams[1], "/api.Grant/UnsealGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &grantUnsealGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grant_UnsealGetClient interface {
	Recv() (*Plaintext, error)
	grpc.ClientStream
}

type grantUnsealGetClient struct {
	grpc.ClientStream
}

func (x *grantUnsealGetClient) Recv() (*Plaintext, error) {
	m := new(Plaintext)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grantClient) Seal(ctx context.Context, opts ...grpc.CallOption) (Grant_SealClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grant_serviceDesc.Streams[2], "/api.Grant/Seal", opts...)
	if err != nil {
		return nil, err
	}
	x := &grantSealClient{stream}
	return x, nil
}

type Grant_SealClient interface {
	Send(*ReferenceAndGrantSpec) error
	CloseAndRecv() (*grant.Grant, error)
	grpc.ClientStream
}

type grantSealClient struct {
	grpc.ClientStream
}

func (x *grantSealClient) Send(m *ReferenceAndGrantSpec) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grantSealClient) CloseAndRecv() (*grant.Grant, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(grant.Grant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grantClient) Unseal(ctx context.Context, in *grant.Grant, opts ...grpc.CallOption) (Grant_UnsealClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grant_serviceDesc.Streams[3], "/api.Grant/Unseal", opts...)
	if err != nil {
		return nil, err
	}
	x := &grantUnsealClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grant_UnsealClient interface {
	Recv() (*reference.Ref, error)
	grpc.ClientStream
}

type grantUnsealClient struct {
	grpc.ClientStream
}

func (x *grantUnsealClient) Recv() (*reference.Ref, error) {
	m := new(reference.Ref)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grantClient) Reseal(ctx context.Context, in *GrantAndGrantSpec, opts ...grpc.CallOption) (*grant.Grant, error) {
	out := new(grant.Grant)
	err := c.cc.Invoke(ctx, "/api.Grant/Reseal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantClient) UnsealDelete(ctx context.Context, in *grant.Grant, opts ...grpc.CallOption) (Grant_UnsealDeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grant_serviceDesc.Streams[4], "/api.Grant/UnsealDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &grantUnsealDeleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grant_UnsealDeleteClient interface {
	Recv() (*Address, error)
	grpc.ClientStream
}

type grantUnsealDeleteClient struct {
	grpc.ClientStream
}

func (x *grantUnsealDeleteClient) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrantServer is the server API for Grant service.
type GrantServer interface {
	// Put a Plaintext and returned the sealed Reference as a Grant
	PutSeal(Grant_PutSealServer) error
	// Unseal a Grant and follow the Reference to return a Plaintext
	UnsealGet(*grant.Grant, Grant_UnsealGetServer) error
	// Seal a Reference to create a Grant
	Seal(Grant_SealServer) error
	// Unseal a Grant to recover the Reference
	Unseal(*grant.Grant, Grant_UnsealServer) error
	// Convert one grant to another grant to re-share with another party or just
	// to change grant type
	Reseal(context.Context, *GrantAndGrantSpec) (*grant.Grant, error)
	// Unseal a Grant and follow the Reference to delete the Plaintext
	UnsealDelete(*grant.Grant, Grant_UnsealDeleteServer) error
}

// UnimplementedGrantServer can be embedded to have forward compatible implementations.
type UnimplementedGrantServer struct {
}

func (*UnimplementedGrantServer) PutSeal(srv Grant_PutSealServer) error {
	return status.Errorf(codes.Unimplemented, "method PutSeal not implemented")
}
func (*UnimplementedGrantServer) UnsealGet(req *grant.Grant, srv Grant_UnsealGetServer) error {
	return status.Errorf(codes.Unimplemented, "method UnsealGet not implemented")
}
func (*UnimplementedGrantServer) Seal(srv Grant_SealServer) error {
	return status.Errorf(codes.Unimplemented, "method Seal not implemented")
}
func (*UnimplementedGrantServer) Unseal(req *grant.Grant, srv Grant_UnsealServer) error {
	return status.Errorf(codes.Unimplemented, "method Unseal not implemented")
}
func (*UnimplementedGrantServer) Reseal(ctx context.Context, req *GrantAndGrantSpec) (*grant.Grant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reseal not implemented")
}
func (*UnimplementedGrantServer) UnsealDelete(req *grant.Grant, srv Grant_UnsealDeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method UnsealDelete not implemented")
}

func RegisterGrantServer(s *grpc.Server, srv GrantServer) {
	s.RegisterService(&_Grant_serviceDesc, srv)
}

func _Grant_PutSeal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrantServer).PutSeal(&grantPutSealServer{stream})
}

type Grant_PutSealServer interface {
	SendAndClose(*grant.Grant) error
	Recv() (*PlaintextAndGrantSpec, error)
	grpc.ServerStream
}

type grantPutSealServer struct {
	grpc.ServerStream
}

func (x *grantPutSealServer) SendAndClose(m *grant.Grant) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grantPutSealServer) Recv() (*PlaintextAndGrantSpec, error) {
	m := new(PlaintextAndGrantSpec)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Grant_UnsealGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(grant.Grant)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrantServer).UnsealGet(m, &grantUnsealGetServer{stream})
}

type Grant_UnsealGetServer interface {
	Send(*Plaintext) error
	grpc.ServerStream
}

type grantUnsealGetServer struct {
	grpc.ServerStream
}

func (x *grantUnsealGetServer) Send(m *Plaintext) error {
	return x.ServerStream.SendMsg(m)
}

func _Grant_Seal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrantServer).Seal(&grantSealServer{stream})
}

type Grant_SealServer interface {
	SendAndClose(*grant.Grant) error
	Recv() (*ReferenceAndGrantSpec, error)
	grpc.ServerStream
}

type grantSealServer struct {
	grpc.ServerStream
}

func (x *grantSealServer) SendAndClose(m *grant.Grant) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grantSealServer) Recv() (*ReferenceAndGrantSpec, error) {
	m := new(ReferenceAndGrantSpec)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Grant_Unseal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(grant.Grant)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrantServer).Unseal(m, &grantUnsealServer{stream})
}

type Grant_UnsealServer interface {
	Send(*reference.Ref) error
	grpc.ServerStream
}

type grantUnsealServer struct {
	grpc.ServerStream
}

func (x *grantUnsealServer) Send(m *reference.Ref) error {
	return x.ServerStream.SendMsg(m)
}

func _Grant_Reseal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantAndGrantSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantServer).Reseal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grant/Reseal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantServer).Reseal(ctx, req.(*GrantAndGrantSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grant_UnsealDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(grant.Grant)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrantServer).UnsealDelete(m, &grantUnsealDeleteServer{stream})
}

type Grant_UnsealDeleteServer interface {
	Send(*Address) error
	grpc.ServerStream
}

type grantUnsealDeleteServer struct {
	grpc.ServerStream
}

func (x *grantUnsealDeleteServer) Send(m *Address) error {
	return x.ServerStream.SendMsg(m)
}

var _Grant_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Grant",
	HandlerType: (*GrantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reseal",
			Handler:    _Grant_Reseal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutSeal",
			Handler:       _Grant_PutSeal_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UnsealGet",
			Handler:       _Grant_UnsealGet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Seal",
			Handler:       _Grant_Seal_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Unseal",
			Handler:       _Grant_Unseal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UnsealDelete",
			Handler:       _Grant_UnsealDelete_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

// CleartextClient is the client API for Cleartext service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CleartextClient interface {
	// Push some plaintext data into storage and get its deterministically
	// generated secret reference.
	Put(ctx context.Context, opts ...grpc.CallOption) (Cleartext_PutClient, error)
	// Provide a secret reference to an encrypted blob and get the plaintext
	// data back.
	Get(ctx context.Context, opts ...grpc.CallOption) (Cleartext_GetClient, error)
}

type cleartextClient struct {
	cc *grpc.ClientConn
}

func NewCleartextClient(cc *grpc.ClientConn) CleartextClient {
	return &cleartextClient{cc}
}

func (c *cleartextClient) Put(ctx context.Context, opts ...grpc.CallOption) (Cleartext_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cleartext_serviceDesc.Streams[0], "/api.Cleartext/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &cleartextPutClient{stream}
	return x, nil
}

type Cleartext_PutClient interface {
	Send(*Plaintext) error
	Recv() (*reference.Ref, error)
	grpc.ClientStream
}

type cleartextPutClient struct {
	grpc.ClientStream
}

func (x *cleartextPutClient) Send(m *Plaintext) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cleartextPutClient) Recv() (*reference.Ref, error) {
	m := new(reference.Ref)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cleartextClient) Get(ctx context.Context, opts ...grpc.CallOption) (Cleartext_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cleartext_serviceDesc.Streams[1], "/api.Cleartext/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &cleartextGetClient{stream}
	return x, nil
}

type Cleartext_GetClient interface {
	Send(*reference.Ref) error
	Recv() (*Plaintext, error)
	grpc.ClientStream
}

type cleartextGetClient struct {
	grpc.ClientStream
}

func (x *cleartextGetClient) Send(m *reference.Ref) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cleartextGetClient) Recv() (*Plaintext, error) {
	m := new(Plaintext)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CleartextServer is the server API for Cleartext service.
type CleartextServer interface {
	// Push some plaintext data into storage and get its deterministically
	// generated secret reference.
	Put(Cleartext_PutServer) error
	// Provide a secret reference to an encrypted blob and get the plaintext
	// data back.
	Get(Cleartext_GetServer) error
}

// UnimplementedCleartextServer can be embedded to have forward compatible implementations.
type UnimplementedCleartextServer struct {
}

func (*UnimplementedCleartextServer) Put(srv Cleartext_PutServer) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedCleartextServer) Get(srv Cleartext_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterCleartextServer(s *grpc.Server, srv CleartextServer) {
	s.RegisterService(&_Cleartext_serviceDesc, srv)
}

func _Cleartext_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CleartextServer).Put(&cleartextPutServer{stream})
}

type Cleartext_PutServer interface {
	Send(*reference.Ref) error
	Recv() (*Plaintext, error)
	grpc.ServerStream
}

type cleartextPutServer struct {
	grpc.ServerStream
}

func (x *cleartextPutServer) Send(m *reference.Ref) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cleartextPutServer) Recv() (*Plaintext, error) {
	m := new(Plaintext)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cleartext_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CleartextServer).Get(&cleartextGetServer{stream})
}

type Cleartext_GetServer interface {
	Send(*Plaintext) error
	Recv() (*reference.Ref, error)
	grpc.ServerStream
}

type cleartextGetServer struct {
	grpc.ServerStream
}

func (x *cleartextGetServer) Send(m *Plaintext) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cleartextGetServer) Recv() (*reference.Ref, error) {
	m := new(reference.Ref)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Cleartext_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Cleartext",
	HandlerType: (*CleartextServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Put",
			Handler:       _Cleartext_Put_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _Cleartext_Get_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

// EncryptionClient is the client API for Encryption service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EncryptionClient interface {
	// Encrypt some data and get its deterministically generated
	// secret reference including its address without storing the data.
	Encrypt(ctx context.Context, opts ...grpc.CallOption) (Encryption_EncryptClient, error)
	// Decrypt the provided data by supplying it alongside its secret
	// reference. The address is not used for decryption and may be omitted.
	Decrypt(ctx context.Context, opts ...grpc.CallOption) (Encryption_DecryptClient, error)
}

type encryptionClient struct {
	cc *grpc.ClientConn
}

func NewEncryptionClient(cc *grpc.ClientConn) EncryptionClient {
	return &encryptionClient{cc}
}

func (c *encryptionClient) Encrypt(ctx context.Context, opts ...grpc.CallOption) (Encryption_EncryptClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Encryption_serviceDesc.Streams[0], "/api.Encryption/Encrypt", opts...)
	if err != nil {
		return nil, err
	}
	x := &encryptionEncryptClient{stream}
	return x, nil
}

type Encryption_EncryptClient interface {
	Send(*Plaintext) error
	Recv() (*ReferenceAndCiphertext, error)
	grpc.ClientStream
}

type encryptionEncryptClient struct {
	grpc.ClientStream
}

func (x *encryptionEncryptClient) Send(m *Plaintext) error {
	return x.ClientStream.SendMsg(m)
}

func (x *encryptionEncryptClient) Recv() (*ReferenceAndCiphertext, error) {
	m := new(ReferenceAndCiphertext)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *encryptionClient) Decrypt(ctx context.Context, opts ...grpc.CallOption) (Encryption_DecryptClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Encryption_serviceDesc.Streams[1], "/api.Encryption/Decrypt", opts...)
	if err != nil {
		return nil, err
	}
	x := &encryptionDecryptClient{stream}
	return x, nil
}

type Encryption_DecryptClient interface {
	Send(*ReferenceAndCiphertext) error
	Recv() (*Plaintext, error)
	grpc.ClientStream
}

type encryptionDecryptClient struct {
	grpc.ClientStream
}

func (x *encryptionDecryptClient) Send(m *ReferenceAndCiphertext) error {
	return x.ClientStream.SendMsg(m)
}

func (x *encryptionDecryptClient) Recv() (*Plaintext, error) {
	m := new(Plaintext)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EncryptionServer is the server API for Encryption service.
type EncryptionServer interface {
	// Encrypt some data and get its deterministically generated
	// secret reference including its address without storing the data.
	Encrypt(Encryption_EncryptServer) error
	// Decrypt the provided data by supplying it alongside its secret
	// reference. The address is not used for decryption and may be omitted.
	Decrypt(Encryption_DecryptServer) error
}

// UnimplementedEncryptionServer can be embedded to have forward compatible implementations.
type UnimplementedEncryptionServer struct {
}

func (*UnimplementedEncryptionServer) Encrypt(srv Encryption_EncryptServer) error {
	return status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (*UnimplementedEncryptionServer) Decrypt(srv Encryption_DecryptServer) error {
	return status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}

func RegisterEncryptionServer(s *grpc.Server, srv EncryptionServer) {
	s.RegisterService(&_Encryption_serviceDesc, srv)
}

func _Encryption_Encrypt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EncryptionServer).Encrypt(&encryptionEncryptServer{stream})
}

type Encryption_EncryptServer interface {
	Send(*ReferenceAndCiphertext) error
	Recv() (*Plaintext, error)
	grpc.ServerStream
}

type encryptionEncryptServer struct {
	grpc.ServerStream
}

func (x *encryptionEncryptServer) Send(m *ReferenceAndCiphertext) error {
	return x.ServerStream.SendMsg(m)
}

func (x *encryptionEncryptServer) Recv() (*Plaintext, error) {
	m := new(Plaintext)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Encryption_Decrypt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EncryptionServer).Decrypt(&encryptionDecryptServer{stream})
}

type Encryption_DecryptServer interface {
	Send(*Plaintext) error
	Recv() (*ReferenceAndCiphertext, error)
	grpc.ServerStream
}

type encryptionDecryptServer struct {
	grpc.ServerStream
}

func (x *encryptionDecryptServer) Send(m *Plaintext) error {
	return x.ServerStream.SendMsg(m)
}

func (x *encryptionDecryptServer) Recv() (*ReferenceAndCiphertext, error) {
	m := new(ReferenceAndCiphertext)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Encryption_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Encryption",
	HandlerType: (*EncryptionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Encrypt",
			Handler:       _Encryption_Encrypt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Decrypt",
			Handler:       _Encryption_Decrypt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	// Insert the (presumably) encrypted data provided and get the its address.
	Push(ctx context.Context, opts ...grpc.CallOption) (Storage_PushClient, error)
	// Retrieve the (presumably) encrypted data stored at address.
	Pull(ctx context.Context, opts ...grpc.CallOption) (Storage_PullClient, error)
	// Get some information about the encrypted blob stored at an address,
	// including whether it exists.
	Stat(ctx context.Context, in *Address, opts ...grpc.CallOption) (*stores.StatInfo, error)
	// Delete the encrypted blob stored at address
	Delete(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) Push(ctx context.Context, opts ...grpc.CallOption) (Storage_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[0], "/api.Storage/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &storagePushClient{stream}
	return x, nil
}

type Storage_PushClient interface {
	Send(*Ciphertext) error
	Recv() (*Address, error)
	grpc.ClientStream
}

type storagePushClient struct {
	grpc.ClientStream
}

func (x *storagePushClient) Send(m *Ciphertext) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storagePushClient) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) Pull(ctx context.Context, opts ...grpc.CallOption) (Storage_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[1], "/api.Storage/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &storagePullClient{stream}
	return x, nil
}

type Storage_PullClient interface {
	Send(*Address) error
	Recv() (*Ciphertext, error)
	grpc.ClientStream
}

type storagePullClient struct {
	grpc.ClientStream
}

func (x *storagePullClient) Send(m *Address) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storagePullClient) Recv() (*Ciphertext, error) {
	m := new(Ciphertext)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) Stat(ctx context.Context, in *Address, opts ...grpc.CallOption) (*stores.StatInfo, error) {
	out := new(stores.StatInfo)
	err := c.cc.Invoke(ctx, "/api.Storage/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Delete(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/api.Storage/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	// Insert the (presumably) encrypted data provided and get the its address.
	Push(Storage_PushServer) error
	// Retrieve the (presumably) encrypted data stored at address.
	Pull(Storage_PullServer) error
	// Get some information about the encrypted blob stored at an address,
	// including whether it exists.
	Stat(context.Context, *Address) (*stores.StatInfo, error)
	// Delete the encrypted blob stored at address
	Delete(context.Context, *Address) (*Address, error)
}

// UnimplementedStorageServer can be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (*UnimplementedStorageServer) Push(srv Storage_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedStorageServer) Pull(srv Storage_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedStorageServer) Stat(ctx context.Context, req *Address) (*stores.StatInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (*UnimplementedStorageServer) Delete(ctx context.Context, req *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).Push(&storagePushServer{stream})
}

type Storage_PushServer interface {
	Send(*Address) error
	Recv() (*Ciphertext, error)
	grpc.ServerStream
}

type storagePushServer struct {
	grpc.ServerStream
}

func (x *storagePushServer) Send(m *Address) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storagePushServer) Recv() (*Ciphertext, error) {
	m := new(Ciphertext)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).Pull(&storagePullServer{stream})
}

type Storage_PullServer interface {
	Send(*Ciphertext) error
	Recv() (*Address, error)
	grpc.ServerStream
}

type storagePullServer struct {
	grpc.ServerStream
}

func (x *storagePullServer) Send(m *Ciphertext) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storagePullServer) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Stat(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Storage/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Delete(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _Storage_Stat_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Storage_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _Storage_Push_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _Storage_Pull_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
