syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package grant;

option go_package = "github.com/monax/hoard/v8/grant";

// As the grant is often stored as json and we to specify the correct tags for
// compatability with the client library.
message Grant {
    // The grantSpec provides sufficient information to decrypt the reference
    // if hoard has access to the requisite secret
    Spec Spec = 1 [json_name="spec", (gogoproto.jsontag) = "spec"];
    bytes EncryptedReferences = 2 [json_name="encryptedreferences", (gogoproto.jsontag) = "encryptedreferences"];
    int32 Version = 3 [json_name="version", (gogoproto.jsontag) = "version"];
}

message Spec {
    PlaintextSpec Plaintext = 1 [json_name="plaintext", (gogoproto.jsontag) = "plaintext"];
    SymmetricSpec Symmetric = 2 [json_name="symmetric", (gogoproto.jsontag) = "symmetric"];
    OpenPGPSpec OpenPGP = 3 [json_name="openpgp", (gogoproto.jsontag) = "openpgp"];
    // If provided then this nonce (rather than a random unique nonce) will be used when forming link-refs
    // Grants sharing a link nonce will _share_ links (this allows some kinds of grants to be deterministic but
    // prevents safe deletion of links)
    bytes LinkNonce = 4 [json_name="linknonce", (gogoproto.jsontag) = "linknonce"];
}

message PlaintextSpec {

}

message SymmetricSpec {
    // A non-secret identifier for a secret that is 'known' to Hoard (accessible via store or config)
    string PublicID = 1 [json_name="publicid", (gogoproto.jsontag) = "publicid"];
}

message OpenPGPSpec {
    string PublicKey = 1 [json_name="publickey", (gogoproto.jsontag) = "publickey"];
}

