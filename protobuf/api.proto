syntax = "proto3";

import "grant.proto";
import "reference.proto";
import "stores.proto";

package api;

option go_package = "github.com/monax/hoard/v8/api";

service Grant {
    // Put a Plaintext and returned the sealed Reference as a Grant
    rpc PutSeal (stream PlaintextAndGrantSpec) returns (grant.Grant);

    // Unseal a Grant and follow the Reference to return a Plaintext
    rpc UnsealGet (grant.Grant) returns (stream Plaintext);

    // Seal a Reference to create a Grant
    rpc Seal (stream ReferenceAndGrantSpec) returns (grant.Grant);

    // Unseal a Grant to recover the Reference
    rpc Unseal (grant.Grant) returns (stream reference.Ref);

    // Convert one grant to another grant to re-share with another party or just
    // to change grant type
    rpc Reseal (GrantAndGrantSpec) returns (grant.Grant);

    // Unseal a Grant and follow the Reference to delete the Plaintext
    rpc UnsealDelete (grant.Grant) returns (stream Address);
}

// Provide plaintext and get plaintext back
service Cleartext {
    // Push some plaintext data into storage and get its deterministically
    // generated secret reference.
    rpc Put (stream Plaintext) returns (stream reference.Ref);

    // Provide a secret reference to an encrypted blob and get the plaintext
    // data back.
    rpc Get (stream reference.Ref) returns (stream Plaintext);
}

// Deterministic encryption
service Encryption {
    // Encrypt some data and get its deterministically generated
    // secret reference including its address without storing the data.
    rpc Encrypt (stream Plaintext) returns (stream ReferenceAndCiphertext);

    // Decrypt the provided data by supplying it alongside its secret
    // reference. The address is not used for decryption and may be omitted.
    rpc Decrypt (stream ReferenceAndCiphertext) returns (stream Plaintext);
}

// Interact directly with storage backend
service Storage {
    // Insert the (presumably) encrypted data provided and get the its address.
    rpc Push (stream Ciphertext) returns (stream Address);

    // Retrieve the (presumably) encrypted data stored at address.
    rpc Pull (stream Address) returns (stream Ciphertext);

    // Get some information about the encrypted blob stored at an address,
    // including whether it exists.
    rpc Stat (Address) returns (stores.StatInfo);

    // Delete the encrypted blob stored at address
    rpc Delete (Address) returns (Address);
}

message GrantAndGrantSpec {
    grant.Grant Grant = 1;
    // The type of grant to output
    grant.Spec GrantSpec = 2;
}

message PlaintextAndGrantSpec {
    Plaintext Plaintext = 1;
    // The type of grant to output
    grant.Spec GrantSpec = 2;
}

message ReferenceAndGrantSpec {
    reference.Ref Reference = 1;
    // The type of grant to output
    grant.Spec GrantSpec = 2;
}

message Header {
    bytes Salt = 1;
    // Metadata
    bytes Data = 2;
    // The chunk size in bytes to use for the data
    int64 ChunkSize =3;
}

message Plaintext {
    bytes Body = 1;
    Header Head = 3;
}

message Ciphertext {
    bytes EncryptedData = 1;
}

message ReferenceAndCiphertext {
    reference.Ref Reference = 1;
    Ciphertext Ciphertext = 2;
}

message Address {
    bytes Address = 1;
}
